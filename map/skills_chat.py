from django.http import JsonResponse
from .skills import simple_text, SkillResponseView, req_rsp
from django.views.decorators.csrf import csrf_exempt
from random import choice


"""
{
  "intent": {
    "id": "ddt605b4mpkrxhdtwkvdeavm",
    "name": "블록 이름"
  },
  "userRequest": {
    "timezone": "Asia/Seoul",
    "params": {
      "ignoreMe": "true"
    },
    "block": {
      "id": "ddt605b4mpkrxhdtwkvdeavm",
      "name": "블록 이름"
    },
    "utterance": "발화 내용",
    "lang": null,
    "user": {
      "id": "743058",
      "type": "accountId",
      "properties": {}
    }
  },
  "bot": {
    "id": "5c6e0983384c5541a0ee6bae",
    "name": "봇 이름"
  },
  "action": {
    "name": "klgta654wb",
    "clientExtra": null,
    "params": {
      "hi_bye": "안녕"
    },
    "id": "tn3q9y9roxpo5lu357dbg4pv",
    "detailParams": {
      "hi_bye": {
        "origin": "안녕",
        "value": "안녕",
        "groupName": ""
      }
    }
  }
}
"""

# skill URL: http://budcha.pythonanywhere.com/map/chat_hello/
# skills_chat.say_hello
# entity: [hi_bye] 안녕 안뇽 안냥 dkssud 녕안 뇽안 하이 ㅎㅇ gd hi 헬로 hello / 잘 자 낼바 빠이 수고해  (+ 모비)
@csrf_exempt
def say_hello(request):
    req = req_rsp(request)
    resp = req.params['hi_bye']['origin']+"입니다 ㅎㅎ"
    return JsonResponse(simple_text(resp))


# skill URL: http://budcha.pythonanywhere.com/map/chat_simple_answer/
# skills_chat.simple_ans
# entity: [simple_resp] 응 알겠어 고마워 알았어 알앗어 알겟어 응응 웅 옹 ㅇㅋ 오키 ㅇㅋㄷㅋ 오야 네 넹 넵 넵! 네넵! 넹넹 눼 늬예 누에~ 알았어요 알앗어요 알앗어여 알았어여 알겠어여 알겟어여 알겠어요 알겟어요
@csrf_exempt
def simple_ans(request):
    req = req_rsp(request)
    resp_list = ["^-^ ~", "（＾ｖ＾）", "(*´﹃｀*)", "ㅎㅎㅎㅎ~", "( >_･)b", "ㅎㅎ~", "ㅎㅅㅎ", ":)", ":D"]
    resp = choice(resp_list)
    return JsonResponse(simple_text(resp))


# skill URL: http://budcha.pythonanywhere.com/map/chat_idiot/
# skills_chat.idiot
# entity: [idiot] (모비+) 바보 멍청이 멍충이 똥멍청이 똥개 모지리
@csrf_exempt
def idiot(request):
    req = req_rsp(request)
    idiot_ = req.params['idiot']['origin'] #params에서 idiot key(entity)의 value(사용자 발화)
    resp_list = [idiot_+" 아니에요!", idiot_+" 아닙니다!", idiot_+" 하지 마세요!", idiot_+"아니야!", "반사!", "놀리지 마요ㅜㅜㅜ", "엉엉ㅜㅜ", "밍,,,", "힝", "뀨><?",'어떻게 그렇게 심한말을!']
    resp = choice(resp_list)
    return JsonResponse(simple_text(resp))


# skill URL: http://budcha.pythonanywhere.com/map/chat_todo/
# skills_chat.todo
# entity:
@csrf_exempt
def todo(request):
    req = req_rsp(request)
   # resp =
    return JsonResponse(simple_text(resp))


# skill URL: http://budcha.pythonanywhere.com/map/chat_interjection/
# skills_chat.interjection
# entity: [interjection] 으악 악 꺅
@csrf_exempt
def interjection(request):
    req = req_rsp(request)
    resp = req.params['interjection']['origin'] + "!!!!!!!!!"
    return JsonResponse(simple_text(resp))


# skill URL: http://budcha.pythonanywhere.com/map/chat_distance/
# skills_chat.weather
# entity:
@csrf_exempt
def distance(request):
    req = req_rsp(request)
    departure = req.params['gym_name1']['value']
    destination = req.params['gym_name']['value']
    gym_dict = {'하루방':1, 'The Tiger Statue in Korea Univ. Anam':2, '고대 본관':3, '인촌동상':4, '휴식':5, '고려대학교 민주광장 진혼비':6, '동암교회':7, '고려대 자연계캠퍼스 입구':8, '출토 - 소나무':9, '고려대 과학도서관':10, '창의관':11, '세븐일레븐 고대본점':12, '소망샘교회':13, '운동기구들':14, '제기동 성당':15, '동원교회':16, '제기 한신아파트 조형물':17, '성복중앙교회':18, '고대 Tiger Dome':19}

    dept_index = gym_dict[departure]-1
    dest_index = gym_dict[destination]-1
    dist_mat = [[0.0,5.126384449100321,7.231874102622461,6.654391109550286,7.136740552021349,9.82853320947175,19.713623198319418,16.234874051393973,20.221801574959745,20.221801574959745,20.35202523863217,20.35202523863217,14.478024788757239,10.516222307524584,10.516222307524584,11.664936500917934,9.566954148435906,8.71953850282413,16.15602195739229],
                    [5.126384449100321,0.0,5.1411767019351355,4.649711288659147,6.20825970240316,8.415566384021206,17.740760887368502,14.436088922370303,18.440520153911923,18.440520153911923,18.77695867989293,18.77695867989293,13.56616056388153,10.91990766322081,10.91990766322081,12.674567113807436,11.425898406952367,9.867728784088408,14.202451653771847],
                    [7.231874102622461,5.1411767019351355,0.0,3.7376135033317084,6.144173938491497,7.176964246040461,15.660083064925441,12.5144308712986,16.512628978009623,16.512628978009623,17.040574124335652,17.040574124335652,12.616695129205434,11.459552077257166,11.459552077257166,13.684074257413032,13.22315408121064,11.643284947604238,12.553228242090675],
                    [6.654391109550286,4.649711288659147,3.7376135033317084,0.0,5.564328106711709,7.049967774780271,16.114167445612022,12.81415369563113,16.819077312704447,16.819077312704447,17.21829118261347,17.21829118261347,12.412012246194632,10.833346904684433,10.833346904684433,12.995311692286819,12.513805491406162,11.408718763237117,13.274494302298063],
                    [7.136740552021349,6.20825970240316,6.144173938491497,5.564328106711709,0.0,5.825402165236149,16.314010948820933,12.489999980990506,16.39835445956908,16.39835445956908,16.31822026743042,16.31822026743042,10.450000183090319,8.341387150772908,8.341387150772908,10.714111920543901,11.218860342819424,12.749871374442344,15.383734642927005],
                    [9.82853320947175,8.415566384021206,7.176964246040461,7.049967774780271,5.825402165236149,0.0,13.668363045890974,9.717055530290118,13.594324079766745,13.594324079766745,13.543074954854935,13.543074954854935,8.468300075426683,9.342287210960471,9.342287210960471,12.181518886495578,13.732221402326738,15.248346549562779,14.572017085890668],
                    [19.713623198319418,17.740760887368502,15.660083064925441,16.114167445612022,16.314010948820933,13.668363045890974,0.0,7.284502340494315,6.302914527158412,6.302914527158412,8.912609484946497,8.912609484946497,13.83386212060957,19.282019210241106,19.282019210241106,22.225828354821925,24.384868151802948,24.077390846019767,13.754938972951267],
                    [16.234874051393973,14.436088922370303,12.5144308712986,12.81415369563113,12.489999980990506,9.717055530290118,7.284502340494315,0.0,7.020024920639273,7.020024920639273,7.946384418889654,7.946384418889654,9.717102855293962,15.031813927379394,15.031813927379394,17.97125238664851,20.34604597250671,21.14143144247522,14.06365967627406],
                    [20.221801574959745,18.440520153911923,16.512628978009623,16.819077312704447,16.39835445956908,13.594324079766745,6.302914527158412,7.020024920639273,0.0,3.0151,5.681973720297702,5.681973720297702,12.098937446931336,18.30498407419946,18.30498407419946,21.174368308570298,24.02906916367143,25.135861599280528,16.585464788755964],
                    [20.221801574959745,18.440520153911923,16.512628978009623,16.819077312704447,16.39835445956908,13.594324079766745,6.302914527158412,7.020024920639273,3.0151,0.0,5.681973720297702,5.681973720297702,12.098937446931336,18.30498407419946,18.30498407419946,21.174368308570298,24.02906916367143,25.135861599280528,16.585464788755964],
                    [20.35202523863217,18.77695867989293,17.040574124335652,17.21829118261347,16.31822026743042,13.543074954854935,8.912609484946497,7.946384418889654,5.681973720297702,5.681973720297702,0.0,3.0151,10.689051330463586,17.272619389521623,17.272619389521623,20.008158415798494,23.375011893521627,25.611151916927017,18.64702479319556],
                    [20.35202523863217,18.77695867989293,17.040574124335652,17.21829118261347,16.31822026743042,13.543074954854935,8.912609484946497,7.946384418889654,5.681973720297702,5.681973720297702,3.0151,0.0,10.689051330463586,17.272619389521623,17.272619389521623,20.008158415798494,23.375011893521627,25.611151916927017,18.64702479319556],
                    [14.478024788757239,13.56616056388153,12.616695129205434,12.412012246194632,10.450000183090319,8.468300075426683,13.83386212060957,9.717102855293962,12.098937446931336,12.098937446931336,10.689051330463586,10.689051330463586,0.0,9.68555596119235,9.68555596119235,12.341444145502459,16.022871625070756,20.16140159495967,18.88533532317107],
                    [10.516222307524584,10.91990766322081,11.459552077257166,10.833346904684433,8.341387150772908,9.342287210960471,19.282019210241106,15.031813927379394,18.30498407419946,18.30498407419946,17.272619389521623,17.272619389521623,9.68555596119235,0.0,3.0151,5.962273447566197,9.494500208337293,15.846258986033247,20.56679062947733],
                    [10.516222307524584,10.91990766322081,11.459552077257166,10.833346904684433,8.341387150772908,9.342287210960471,19.282019210241106,15.031813927379394,18.30498407419946,18.30498407419946,17.272619389521623,17.272619389521623,9.68555596119235,3.0151,0.0,5.962273447566197,9.494500208337293,15.846258986033247,20.56679062947733],
                    [11.664936500917934,12.674567113807436,13.684074257413032,12.995311692286819,10.714111920543901,12.181518886495578,22.225828354821925,17.97125238664851,21.174368308570298,21.174368308570298,20.008158415798494,20.008158415798494,12.341444145502459,5.962273447566197,5.962273447566197,0.0,8.005892615399524,16.230560726931053,23.082711017590274],
                    [9.566954148435906,11.425898406952367,13.22315408121064,12.513805491406162,11.218860342819424,13.732221402326738,24.384868151802948,20.34604597250671,24.02906916367143,24.02906916367143,23.375011893521627,23.375011893521627,16.022871625070756,9.494500208337293,9.494500208337293,8.005892615399524,0.0,12.280403754594076,22.61312077666299],
                    [8.71953850282413,9.867728784088408,11.643284947604238,11.408718763237117,12.749871374442344,15.248346549562779,24.077390846019767,21.14143144247522,25.135861599280528,25.135861599280528,25.611151916927017,25.611151916927017,20.16140159495967,15.846258986033247,15.846258986033247,16.230560726931053,12.280403754594076,0.0,17.697246242387365],
                    [16.15602195739229,14.202451653771847,12.553228242090675,13.274494302298063,15.383734642927005,14.572017085890668,13.754938972951267,14.06365967627406,16.585464788755964,16.585464788755964,18.64702479319556,18.64702479319556,18.88533532317107,20.56679062947733,20.56679062947733,23.082711017590274,22.61312077666299,17.697246242387365,0.0]]
    time = str(round(dist_mat[dept_index][dest_index]))
    resp = departure+"에서 "+destination+"까지 약 "+"'"+ time + "'분 소요"
    return JsonResponse(simple_text(resp))




"""
# skill URL: http://budcha.pythonanywhere.com/map/chat_meal/
# skills_chat.meal
# entity:
@csrf_exempt
def meal(request):
    req = req_rsp(request)
    menu = req.params['menu']['origin']  # params에서 idiot key(entity)의 value(사용자 발화)
    resp = menu+"이(가) 드시고 싶으셨구나~"+"\n맛있게 드세요~^ㅇ^"
    return JsonResponse(simple_text(resp))


class meal_Response(SkillResponseView):
    def meal(self, request):
        resp = skillResponse()
        idiot_ = req.params['menu']['origin']  # params에서 idiot key(entity)의 value(사용자 발화)
        resp_list =
        return JsonResponse(simple_text(resp))


# skill URL: http://budcha.pythonanywhere.com/map/chat_recommend/
# skills_chat.recommend
# entity:
@csrf_exempt
def recommend(request):
    hot =["떡볶이", '불닭', '닭발', "매운갈비찜", "매운새우깡", "핫소스", "고추 많이 넣은 마라탕", "매운 라면", "매운 매운탕"]
    sweet = ["아이스크림", "초콜릿", '당고', '사탕', '와플', '초코시럽', '빙수', '달고나', '설탕 도마도', '양갱','과일']
    salty = ['소금','깨소금','맛소금','프링글스','포카칩 짭짤한 맛','바닷물','천일염','김','','','','']
    creamy = ['알리오 올리오','까르보나라','치즈케잌','치즈피자','','','','','','','','']
    cheap = ['김밥','라면','삼각김밥','도시락','빵','토스트','제일 싼 햄버거','학식','감자 고구마 등 구황작물','친구에게 돈 빌려먹기','','']
    ordinary = ['김치찌개', '된장찌개', '계란 후라이에 밥', '간장계란밥', '집밥', '김밥', '라면']
    special = ['케잌','육회','사시미','레스토랑','오랜만에 가족끼리 요리하기']
    light = ['쌀국수','재첩국','샐러드','생과일 쥬스','커피나 한잔','','','','','','','']
    tasty = ['피자', '곱창', '뷔페', '치킨', '막창', '감바스', ]
    big = ["김밥 두 줄에 라뽁이", "애슐리", '고기뷔페', '뷔페', '햄버거 2세트', '피자 한판', ]

    req = req_rsp(request)
    taste = req.params['taste']['value']
    if taste == "매운거":
        sel = choice(hot)
    elif taste =="단거":
        sel = choice(sweet)
    elif taste == "짠거":
        sel = choice(salty)
    elif taste =="특별한거":
        sel = choice(special)
    elif taste == "평범한거":
        sel = choice(ordinary)
    elif taste == "맛있는거":
        sel = choice(tasty)
    elif taste == "싼거":
        sel = choice(cheap)
    elif taste == "가벼운거":
        sel = choice(light)
    elif taste == "든든한거":
        sel = choice(big)
    else:
        sel = choice(creamy)

    resp = "그렇다면 저는 "+sel+" 추천합니다~"
    return JsonResponse(simple_text(resp))
    # url 전송하는거 되면 해보기"""


